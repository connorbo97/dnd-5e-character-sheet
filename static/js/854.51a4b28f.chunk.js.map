{"version":3,"file":"static/js/854.51a4b28f.chunk.js","mappings":"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","sources":["../node_modules/@3d-dice/dice-box/src/components/world.offscreen.js"],"sourcesContent":["import worldWorker from './offscreenCanvas.worker?worker&inline' // using vite.js worker import - this will be compiled away\n\nclass WorldOffScreen {\n\tinitialized = false\n\toffscreenWorkerInit = false\n\tthemeLoadedInit = false\n\tpendingThemePromises = {}\n\t#offscreenCanvas\n\t#OffscreenWorker\n\t// onInitComplete = () => {} // init callback\n\tonRollResult = () => {} // individual die callback\n\tonRollComplete = () => {} // roll group callback\n\n\tconstructor(options){\n\t\tthis.onInitComplete = options.onInitComplete\n\n\t\t// transfer control offscreen\n\t\tthis.#offscreenCanvas = options.canvas.transferControlToOffscreen()\n\n\t\t// initialize 3D World in which BabylonJS runs\n\t\tthis.#OffscreenWorker = new worldWorker()\n\t\t// need to initialize the web worker and get confirmation that initialization is complete before other scripts can run\n\t\t// set a property on the worker to a promise that is resolve when the proper message is returned from the worker\n\t\tthis.#OffscreenWorker.init = new Promise((resolve, reject) => {\n\t\t\tthis.offscreenWorkerInit = resolve\n\t\t})\n\n\t\tthis.initialized = this.#initScene(options)\n\t}\n\n\t// initialize the babylon scene\n\tasync #initScene(config) {\n\t\t// initialize the offscreen worker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction: \"init\",\n\t\t\tcanvas: this.#offscreenCanvas,\n\t\t\twidth: config.canvas.clientWidth,\n\t\t\theight: config.canvas.clientHeight,\n\t\t\toptions: config.options,\n\t\t}, [this.#offscreenCanvas])\n\n\t\t// handle messages from offscreen BabylonJS World\n\t\tthis.#OffscreenWorker.onmessage = (e) => {\n\t\t\tswitch( e.data.action ) {\n\t\t\t\tcase \"init-complete\":\n\t\t\t\t\tthis.offscreenWorkerInit() //fulfill promise so other things can run\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"connect-complete\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"theme-loaded\":\n\t\t\t\t\tif(e.data.id){\n\t\t\t\t\t\tthis.pendingThemePromises[e.data.id](e.data.id)\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-result':\n\t\t\t\t\tthis.onRollResult(e.data.die)\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-complete':\n\t\t\t\t\tthis.onRollComplete()\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'die-removed':\n\t\t\t\t\tthis.onDieRemoved(e.data.rollId)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// await Promise.all([this.#OffscreenWorker.init])\n\t\tawait this.#OffscreenWorker.init\n\n\t\tthis.onInitComplete(true)\n\n\t\treturn true\n\t}\n\n\tconnect(port){\n\t\t// Setup the connection: Port 1 is for this.#OffscreenWorker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction : \"connect\",\n\t\t\tport\n\t\t},[ port ])\n\t}\n\n\tupdateConfig(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"updateConfig\", options});\n\t}\n\n\tresize(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"resize\", options});\n\t}\n\n\tasync loadTheme(options) {\n\t\t// prevent multiple requests of the same theme\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(Object.keys(this.pendingThemePromises).includes(options.theme)) {\n\t\t\t\treturn resolve()\n\t\t\t}\n\n\t\t\tthis.pendingThemePromises[options.theme] = resolve\n\t\t\tthis.#OffscreenWorker.postMessage({action: \"loadTheme\", options})\n\t\t}).catch(error => console.error(error))\n\t}\n\n\tclear(){\n\t\tthis.#OffscreenWorker.postMessage({action: \"clearDice\"})\n\t}\n\n\tadd(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addDie\", options})\n\t}\n\t\n\taddNonDie(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addNonDie\", options})\n\t}\n\n\tremove(options){\n\t\t// remove the die from the render\n\t\tthis.#OffscreenWorker.postMessage({action: \"removeDie\", options})\n\t}\n}\n\nexport default WorldOffScreen"],"names":["L","l","_this","_classCallCheck","m","W","d","b","G","this","onInitComplete","h","canvas","transferControlToOffscreen","N","V","init","Promise","Z","c","offscreenWorkerInit","initialized","a","Y","call","_createClass","key","value","postMessage","action","port","options","_loadTheme","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","wrap","_context","prev","next","abrupt","Object","keys","pendingThemePromises","includes","theme","catch","console","error","stop","_x","apply","arguments","WeakMap","WeakSet","_ref","_callee2","_this3","_context2","width","clientWidth","height","clientHeight","onmessage","data","id","onRollResult","die","onRollComplete","onDieRemoved","rollId","_x2"],"sourceRoot":""}